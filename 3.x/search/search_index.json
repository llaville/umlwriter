{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About Features The main features provided by this library are: Parse one to many PHP file Parse one to many directory Configuration is handle by a YAML file or console command arguments build UML statements of a class diagram draw png/svg image formats if backends installed (graphviz, plantuml server) two generators provided by default: GraphViz PlantUML Currently, the following language features are supported: Property and method visibility Static properties and methods Method return types natively and from doc comment Parameter types from type hinting and doc comment Parameter default values Class constants with value Property types from doc comment Property default values Implemented interfaces and parent classes Abstract classes","title":"Home"},{"location":"#about","text":"","title":"About"},{"location":"#features","text":"The main features provided by this library are: Parse one to many PHP file Parse one to many directory Configuration is handle by a YAML file or console command arguments build UML statements of a class diagram draw png/svg image formats if backends installed (graphviz, plantuml server) two generators provided by default: GraphViz PlantUML Currently, the following language features are supported: Property and method visibility Static properties and methods Method return types natively and from doc comment Parameter types from type hinting and doc comment Parameter default values Class constants with value Property types from doc comment Property default values Implemented interfaces and parent classes Abstract classes","title":"Features"},{"location":"getting-started/","text":"Getting started Requirements PHP 8.0 or greater graphp/graph package from master branch (considered as future stable v1.0.0) graphp/graphviz package from master branch (considered as future stable v1.0.0) bartlett/graph-uml Core engine to build UML diagrams in PHP bartlett/graph-plantuml-generator A PlantUML generator for graph-uml. roave/better-reflection the Reflection API Generated with fork of clue/graph-composer . Learn more about this fork on PR request . Installation With Composer The recommended way to install this library is through composer . If you don't know yet what is composer, have a look on introduction . composer require bartlett/umlwriter ^3.0 With Git The UmlWriter can be directly used from GitHub by cloning the repository into a directory of your choice. git clone -b 3 .x https://github.com/llaville/umlwriter.git Additionally, you'll have to install GraphViz ( dot executable) and/or PlantUML jar with Java Runtime (java executable). Users of Debian/Ubuntu-based distributions may simply invoke: sudo apt update sudo apt-get install graphviz sudo apt-get install openjdk-11-jre-headless while remaining users should install from GraphViz Download page and from PlantUML Download page.","title":"Getting-Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting started"},{"location":"getting-started/#requirements","text":"PHP 8.0 or greater graphp/graph package from master branch (considered as future stable v1.0.0) graphp/graphviz package from master branch (considered as future stable v1.0.0) bartlett/graph-uml Core engine to build UML diagrams in PHP bartlett/graph-plantuml-generator A PlantUML generator for graph-uml. roave/better-reflection the Reflection API Generated with fork of clue/graph-composer . Learn more about this fork on PR request .","title":"Requirements"},{"location":"getting-started/#installation","text":"","title":"Installation"},{"location":"getting-started/#with-composer","text":"The recommended way to install this library is through composer . If you don't know yet what is composer, have a look on introduction . composer require bartlett/umlwriter ^3.0","title":"With Composer"},{"location":"getting-started/#with-git","text":"The UmlWriter can be directly used from GitHub by cloning the repository into a directory of your choice. git clone -b 3 .x https://github.com/llaville/umlwriter.git Additionally, you'll have to install GraphViz ( dot executable) and/or PlantUML jar with Java Runtime (java executable). Users of Debian/Ubuntu-based distributions may simply invoke: sudo apt update sudo apt-get install graphviz sudo apt-get install openjdk-11-jre-headless while remaining users should install from GraphViz Download page and from PlantUML Download page.","title":"With Git"},{"location":"01_Features/Configuration/","text":"Configuration UmlWriter v3 can be configured in two ways (YAML file or console command arguments). Without changes, following defaults will be applied. Defaults Option Value Default Description show_constants boolean true whether to show class constants as readonly static variables (or just omit them completely) show_properties boolean true whether to show class properties show_methods boolean true whether to show class or interface methods show_private boolean true whether to also show private methods/properties show_protected boolean true whether to also show protected methods/properties add_parents boolean true whether to show add parent classes or interfaces only_self boolean true whether to only show methods/properties that are actually defined in this class (and not those merely inherited from base) label_format string record whether to use html or record formatted labels (graphviz specific feature). Others generator may have different values indent_string string ' ' string to indent graph statement parts (two blanks) paths array ['src'] data source (file or directory) to parse generator string graphviz identification returned by getName() method of a class implementing Bartlett\\GraphUml\\Generator\\GeneratorInterface graph.name string G name of the graph graph.overlap boolean false determines if and how node overlaps should be removed. More details at http://graphviz.org/doc/info/attrs.html#d:overlap graph.rankdir string TB sets direction of graph layout (Top to Bottom). See http://graphviz.org/doc/info/attrs.html#d:rankdir node.fontname string Verdana font name to use to draw node of the graph node.fontsize integer 8 font size to draw node of the graph node.shape string none set the shape of nodes node.margin integer 0 see http://graphviz.org/doc/info/attrs.html#d:margin for details node.fillcolor string #FEFECE color used to fill background color of nodes. See http://graphviz.org/doc/info/attrs.html#d:fillcolor node.style string filled see http://graphviz.org/doc/info/attrs.html#d:style edge.fontname string Verdana font name to use to draw edge of the graph edge.fontsize integer 8 font size to draw edge of the graph Console command See all arguments and options details in Console Commands section. YAML file (example) Attributes to configure graph (node, edge, cluster) may be found at: https://graphviz.gitlab.io/_pages/doc/info/attrs.html And to configure colors for graphviz and plantuml generators: https://graphviz.gitlab.io/_pages/doc/info/colors.html https://plantuml.com/en/color parameters : generator : graphviz graph : name : G overlap : 'false' rankdir : LR bgcolor : transparent node : fillcolor : '#FEFECE' style : filled edge : ~ cluster : Bartlett\\UmlWriter\\Console : graph : bgcolor : BurlyWood Symfony\\Component\\Console : graph : bgcolor : LightSteelBlue Symfony\\Contracts\\Service : graph : bgcolor : LightSteelBlue paths : - src/ show_constants : true show_properties : true show_methods : true show_private : false show_protected : false Architecture","title":"Configuration"},{"location":"01_Features/Configuration/#configuration","text":"UmlWriter v3 can be configured in two ways (YAML file or console command arguments). Without changes, following defaults will be applied.","title":"Configuration"},{"location":"01_Features/Configuration/#defaults","text":"Option Value Default Description show_constants boolean true whether to show class constants as readonly static variables (or just omit them completely) show_properties boolean true whether to show class properties show_methods boolean true whether to show class or interface methods show_private boolean true whether to also show private methods/properties show_protected boolean true whether to also show protected methods/properties add_parents boolean true whether to show add parent classes or interfaces only_self boolean true whether to only show methods/properties that are actually defined in this class (and not those merely inherited from base) label_format string record whether to use html or record formatted labels (graphviz specific feature). Others generator may have different values indent_string string ' ' string to indent graph statement parts (two blanks) paths array ['src'] data source (file or directory) to parse generator string graphviz identification returned by getName() method of a class implementing Bartlett\\GraphUml\\Generator\\GeneratorInterface graph.name string G name of the graph graph.overlap boolean false determines if and how node overlaps should be removed. More details at http://graphviz.org/doc/info/attrs.html#d:overlap graph.rankdir string TB sets direction of graph layout (Top to Bottom). See http://graphviz.org/doc/info/attrs.html#d:rankdir node.fontname string Verdana font name to use to draw node of the graph node.fontsize integer 8 font size to draw node of the graph node.shape string none set the shape of nodes node.margin integer 0 see http://graphviz.org/doc/info/attrs.html#d:margin for details node.fillcolor string #FEFECE color used to fill background color of nodes. See http://graphviz.org/doc/info/attrs.html#d:fillcolor node.style string filled see http://graphviz.org/doc/info/attrs.html#d:style edge.fontname string Verdana font name to use to draw edge of the graph edge.fontsize integer 8 font size to draw edge of the graph","title":"Defaults"},{"location":"01_Features/Configuration/#console-command","text":"See all arguments and options details in Console Commands section.","title":"Console command"},{"location":"01_Features/Configuration/#yaml-file-example","text":"Attributes to configure graph (node, edge, cluster) may be found at: https://graphviz.gitlab.io/_pages/doc/info/attrs.html And to configure colors for graphviz and plantuml generators: https://graphviz.gitlab.io/_pages/doc/info/colors.html https://plantuml.com/en/color parameters : generator : graphviz graph : name : G overlap : 'false' rankdir : LR bgcolor : transparent node : fillcolor : '#FEFECE' style : filled edge : ~ cluster : Bartlett\\UmlWriter\\Console : graph : bgcolor : BurlyWood Symfony\\Component\\Console : graph : bgcolor : LightSteelBlue Symfony\\Contracts\\Service : graph : bgcolor : LightSteelBlue paths : - src/ show_constants : true show_properties : true show_methods : true show_private : false show_protected : false","title":"YAML file (example)"},{"location":"01_Features/Configuration/#architecture","text":"","title":"Architecture"},{"location":"01_Features/Services/","text":"Services UmlWriter v3 contains two different services. ContainerService implements a PSR-11 compatible service container that allows you to standardize and centralize the way objects are constructed. ClassDiagramRenderer that is in charge to add vertices and edges in the graph corresponding to data source(s) parsed. Service Container We distinguish two kind of services: internal like ClassDiagramRenderer and ClassDiagramCommand that cannot be changed at runtime. runtime like InputInterface , OutputInterface and GeneratorFactoryInterface (the others) that could be changed. Class Diagram Renderer Is in charge to add vertices and edge with the __invoke() method. getGraph() method allows retrieving current graph to let you ability to personalize render by setting graph, node or edge attributes. Is able to retrieve all namespaces, classes, interfaces found during parse data source with getMetadata() method. <?php // Example use Bartlett\\UmlWriter\\Generator\\GeneratorFactory ; use Bartlett\\UmlWriter\\Service\\ClassDiagramRenderer ; use Symfony\\Component\\Finder\\Finder ; // path to directory where to find PHP source code $dataSource = 'src' ; $finder = new Finder (); $finder -> in ( $dataSource ) -> name ( '*.php' ); $generatorFactory = new GeneratorFactory ( 'graphviz' ); // creates instance of Bartlett\\GraphUml\\Generator\\GraphVizGenerator $generator = $generatorFactory -> getGenerator (); $renderer = new ClassDiagramRenderer (); // generates UML class diagram of all objects found in dataSource (in graphviz format) $script = $renderer ( $finder , $generator ); // show all metadata var_dump ( $renderer -> getMetadata ()); That could produce such results (with UmlWriter src directory) array(3) { [\"classes\"]=> array(8) { [0]=> string(53) \"Bartlett\\UmlWriter\\Generator\\AbstractGeneratorFactory\" [1]=> string(45) \"Bartlett\\UmlWriter\\Generator\\GeneratorFactory\" [2]=> string(47) \"Bartlett\\UmlWriter\\Service\\ConfigurationHandler\" [3]=> string(47) \"Bartlett\\UmlWriter\\Service\\ClassDiagramRenderer\" [4]=> string(43) \"Bartlett\\UmlWriter\\Service\\ContainerService\" [5]=> string(38) \"Bartlett\\UmlWriter\\Console\\Application\" [6]=> string(54) \"Bartlett\\UmlWriter\\Console\\Command\\ClassDiagramCommand\" [7]=> string(47) \"Bartlett\\UmlWriter\\Config\\Loader\\YamlFileLoader\" } [\"interfaces\"]=> array(1) { [0]=> string(54) \"Bartlett\\UmlWriter\\Generator\\GeneratorFactoryInterface\" } [\"namespaces\"]=> array(5) { [0]=> string(28) \"Bartlett\\UmlWriter\\Generator\" [3]=> string(26) \"Bartlett\\UmlWriter\\Service\" [6]=> string(26) \"Bartlett\\UmlWriter\\Console\" [7]=> string(34) \"Bartlett\\UmlWriter\\Console\\Command\" [8]=> string(32) \"Bartlett\\UmlWriter\\Config\\Loader\" } } Architecture","title":"Services"},{"location":"01_Features/Services/#services","text":"UmlWriter v3 contains two different services. ContainerService implements a PSR-11 compatible service container that allows you to standardize and centralize the way objects are constructed. ClassDiagramRenderer that is in charge to add vertices and edges in the graph corresponding to data source(s) parsed.","title":"Services"},{"location":"01_Features/Services/#service-container","text":"We distinguish two kind of services: internal like ClassDiagramRenderer and ClassDiagramCommand that cannot be changed at runtime. runtime like InputInterface , OutputInterface and GeneratorFactoryInterface (the others) that could be changed.","title":"Service Container"},{"location":"01_Features/Services/#class-diagram-renderer","text":"Is in charge to add vertices and edge with the __invoke() method. getGraph() method allows retrieving current graph to let you ability to personalize render by setting graph, node or edge attributes. Is able to retrieve all namespaces, classes, interfaces found during parse data source with getMetadata() method. <?php // Example use Bartlett\\UmlWriter\\Generator\\GeneratorFactory ; use Bartlett\\UmlWriter\\Service\\ClassDiagramRenderer ; use Symfony\\Component\\Finder\\Finder ; // path to directory where to find PHP source code $dataSource = 'src' ; $finder = new Finder (); $finder -> in ( $dataSource ) -> name ( '*.php' ); $generatorFactory = new GeneratorFactory ( 'graphviz' ); // creates instance of Bartlett\\GraphUml\\Generator\\GraphVizGenerator $generator = $generatorFactory -> getGenerator (); $renderer = new ClassDiagramRenderer (); // generates UML class diagram of all objects found in dataSource (in graphviz format) $script = $renderer ( $finder , $generator ); // show all metadata var_dump ( $renderer -> getMetadata ()); That could produce such results (with UmlWriter src directory) array(3) { [\"classes\"]=> array(8) { [0]=> string(53) \"Bartlett\\UmlWriter\\Generator\\AbstractGeneratorFactory\" [1]=> string(45) \"Bartlett\\UmlWriter\\Generator\\GeneratorFactory\" [2]=> string(47) \"Bartlett\\UmlWriter\\Service\\ConfigurationHandler\" [3]=> string(47) \"Bartlett\\UmlWriter\\Service\\ClassDiagramRenderer\" [4]=> string(43) \"Bartlett\\UmlWriter\\Service\\ContainerService\" [5]=> string(38) \"Bartlett\\UmlWriter\\Console\\Application\" [6]=> string(54) \"Bartlett\\UmlWriter\\Console\\Command\\ClassDiagramCommand\" [7]=> string(47) \"Bartlett\\UmlWriter\\Config\\Loader\\YamlFileLoader\" } [\"interfaces\"]=> array(1) { [0]=> string(54) \"Bartlett\\UmlWriter\\Generator\\GeneratorFactoryInterface\" } [\"namespaces\"]=> array(5) { [0]=> string(28) \"Bartlett\\UmlWriter\\Generator\" [3]=> string(26) \"Bartlett\\UmlWriter\\Service\" [6]=> string(26) \"Bartlett\\UmlWriter\\Console\" [7]=> string(34) \"Bartlett\\UmlWriter\\Console\\Command\" [8]=> string(32) \"Bartlett\\UmlWriter\\Config\\Loader\" } }","title":"Class Diagram Renderer"},{"location":"01_Features/Services/#architecture","text":"","title":"Architecture"},{"location":"02_Console_Commands/diagram_class/","text":"Class Diagrams UmlWriter v3 includes only one command diagram:class to print UML class diagram statements. Features Parse one to many data source (file or directory) at same times with paths argument. Show (default) or hide all class constants by --without-constants option. Show (default) or hide all class properties by --without-properties option. Show (default) or hide all class methods by --without-methods option. Show (default) or hide private methods and private properties by --hide-private options. Show (default) or hide protected methods and protected properties by --hide-protected options. Can be use your own autoloader and initialize what ever you want by --bootstrap option. Use either GraphViz , PlantUml or your own generator by --generator option. Can be able to configure all graph render options and more by --configuration option. Synoptic Description: Generate class diagram statements of a given data source Usage: diagram:class [ options ] [ -- ] [ <paths>... ] Arguments: paths Data source ( file or directory ) Options: -o, --output = OUTPUT Path to output image file --format = FORMAT Set output format ( depending of each generator ) --generator = GENERATOR Graph generator --bootstrap = BOOTSTRAP A PHP script that is included before graph run -c, --configuration = CONFIGURATION Read configuration from YAML file --without-constants Hide all class constants --without-properties Hide all class properties --without-methods Hide all class methods --hide-private Hide private methods/properties --hide-protected Hide protected methods/properties --no-statement Do not show diagram statements -h, --help Display this help message -q, --quiet Do not output any message -V, --version Display this application version --ansi Force ANSI output --no-ansi Disable ANSI output -n, --no-interaction Do not ask any interactive question -v | vv | vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug Examples Here are a list of concrete examples you can find in Cookbook Show only public elements in UmlWriter architecture Show only public methods in UmlWriter architecture Use a custom autoloader Architecture","title":"Class diagrams"},{"location":"02_Console_Commands/diagram_class/#class-diagrams","text":"UmlWriter v3 includes only one command diagram:class to print UML class diagram statements.","title":"Class Diagrams"},{"location":"02_Console_Commands/diagram_class/#features","text":"Parse one to many data source (file or directory) at same times with paths argument. Show (default) or hide all class constants by --without-constants option. Show (default) or hide all class properties by --without-properties option. Show (default) or hide all class methods by --without-methods option. Show (default) or hide private methods and private properties by --hide-private options. Show (default) or hide protected methods and protected properties by --hide-protected options. Can be use your own autoloader and initialize what ever you want by --bootstrap option. Use either GraphViz , PlantUml or your own generator by --generator option. Can be able to configure all graph render options and more by --configuration option.","title":"Features"},{"location":"02_Console_Commands/diagram_class/#synoptic","text":"Description: Generate class diagram statements of a given data source Usage: diagram:class [ options ] [ -- ] [ <paths>... ] Arguments: paths Data source ( file or directory ) Options: -o, --output = OUTPUT Path to output image file --format = FORMAT Set output format ( depending of each generator ) --generator = GENERATOR Graph generator --bootstrap = BOOTSTRAP A PHP script that is included before graph run -c, --configuration = CONFIGURATION Read configuration from YAML file --without-constants Hide all class constants --without-properties Hide all class properties --without-methods Hide all class methods --hide-private Hide private methods/properties --hide-protected Hide protected methods/properties --no-statement Do not show diagram statements -h, --help Display this help message -q, --quiet Do not output any message -V, --version Display this application version --ansi Force ANSI output --no-ansi Disable ANSI output -n, --no-interaction Do not ask any interactive question -v | vv | vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug","title":"Synoptic"},{"location":"02_Console_Commands/diagram_class/#examples","text":"Here are a list of concrete examples you can find in Cookbook Show only public elements in UmlWriter architecture Show only public methods in UmlWriter architecture Use a custom autoloader","title":"Examples"},{"location":"02_Console_Commands/diagram_class/#architecture","text":"","title":"Architecture"},{"location":"03_Cookbook/01_UmlWriter_public_architecture/","text":"Architecture Diagram Generate UmlWriter graph architecture with only public elements and default render options. Console Command When you're in project folder, invoke diagram:class command with following arguments: bin/umlwriter diagram:class src/ --hide-private --hide-protected --format = svg Will output this graph statements and image look like Batch PHP Produces same results as previous console command. <?php use Bartlett\\UmlWriter\\Generator\\GeneratorFactory ; use Bartlett\\UmlWriter\\Service\\ClassDiagramRenderer ; use Symfony\\Component\\Finder\\Finder ; // path to directory where to find PHP source code $dataSource = dirname ( __DIR__ ) . '/src' ; $finder = new Finder (); $finder -> in ( $dataSource ) -> name ( '*.php' ); $generatorFactory = new GeneratorFactory ( 'graphviz' ); // creates instance of Bartlett\\GraphUml\\Generator\\GraphVizGenerator $generator = $generatorFactory -> getGenerator (); $renderer = new ClassDiagramRenderer (); $options = [ 'show_private' => false , 'show_protected' => false , 'node.fillcolor' => '#FEFECE' , 'node.style' => 'filled' , ]; // generates UML class diagram of all objects found in dataSource (in graphviz format) $script = $renderer ( $finder , $generator , $options ); // show UML diagram statements echo $script ; // default format is PNG, change it to SVG $generator -> setFormat ( 'svg' ); echo $generator -> createImageFile ( $renderer -> getGraph ()) . ' file generated' . PHP_EOL ;","title":"Application diagram"},{"location":"03_Cookbook/01_UmlWriter_public_architecture/#architecture-diagram","text":"Generate UmlWriter graph architecture with only public elements and default render options.","title":"Architecture Diagram"},{"location":"03_Cookbook/01_UmlWriter_public_architecture/#console-command","text":"When you're in project folder, invoke diagram:class command with following arguments: bin/umlwriter diagram:class src/ --hide-private --hide-protected --format = svg Will output this graph statements and image look like","title":"Console Command"},{"location":"03_Cookbook/01_UmlWriter_public_architecture/#batch-php","text":"Produces same results as previous console command. <?php use Bartlett\\UmlWriter\\Generator\\GeneratorFactory ; use Bartlett\\UmlWriter\\Service\\ClassDiagramRenderer ; use Symfony\\Component\\Finder\\Finder ; // path to directory where to find PHP source code $dataSource = dirname ( __DIR__ ) . '/src' ; $finder = new Finder (); $finder -> in ( $dataSource ) -> name ( '*.php' ); $generatorFactory = new GeneratorFactory ( 'graphviz' ); // creates instance of Bartlett\\GraphUml\\Generator\\GraphVizGenerator $generator = $generatorFactory -> getGenerator (); $renderer = new ClassDiagramRenderer (); $options = [ 'show_private' => false , 'show_protected' => false , 'node.fillcolor' => '#FEFECE' , 'node.style' => 'filled' , ]; // generates UML class diagram of all objects found in dataSource (in graphviz format) $script = $renderer ( $finder , $generator , $options ); // show UML diagram statements echo $script ; // default format is PNG, change it to SVG $generator -> setFormat ( 'svg' ); echo $generator -> createImageFile ( $renderer -> getGraph ()) . ' file generated' . PHP_EOL ;","title":"Batch PHP"},{"location":"03_Cookbook/02_UmlWriter_public_methods_only/","text":"Architecture Diagram (public visibility) Generate UmlWriter graph architecture with only public methods and default render options. Console Command When you're in project folder, invoke diagram:class command with following arguments: bin/umlwriter diagram:class src/ --hide-private --hide-protected --without-constants --without-properties --format = svg Will output this graph statements and image look like Batch PHP Produces same results as previous console command. <?php use Bartlett\\UmlWriter\\Generator\\GeneratorFactory ; use Bartlett\\UmlWriter\\Service\\ClassDiagramRenderer ; use Symfony\\Component\\Finder\\Finder ; // path to directory where to find PHP source code $dataSource = dirname ( __DIR__ , 2 ) . '/src' ; $finder = new Finder (); $finder -> in ( $dataSource ) -> name ( '*.php' ); $generatorFactory = new GeneratorFactory ( 'graphviz' ); // creates instance of Bartlett\\GraphUml\\Generator\\GraphVizGenerator $generator = $generatorFactory -> getGenerator (); $renderer = new ClassDiagramRenderer (); $options = [ 'show_private' => false , 'show_protected' => false , 'show_constants' => false , 'show_properties' => false , 'node.fillcolor' => '#FEFECE' , 'node.style' => 'filled' , ]; // generates UML class diagram of all objects found in dataSource (in graphviz format) $script = $renderer ( $finder , $generator , $options ); // show UML diagram statements echo $script ; // default format is PNG, change it to SVG $generator -> setFormat ( 'svg' ); echo $generator -> createImageFile ( $renderer -> getGraph ()) . ' file generated' . PHP_EOL ;","title":"Application diagram with public methods only"},{"location":"03_Cookbook/02_UmlWriter_public_methods_only/#architecture-diagram-public-visibility","text":"Generate UmlWriter graph architecture with only public methods and default render options.","title":"Architecture Diagram (public visibility)"},{"location":"03_Cookbook/02_UmlWriter_public_methods_only/#console-command","text":"When you're in project folder, invoke diagram:class command with following arguments: bin/umlwriter diagram:class src/ --hide-private --hide-protected --without-constants --without-properties --format = svg Will output this graph statements and image look like","title":"Console Command"},{"location":"03_Cookbook/02_UmlWriter_public_methods_only/#batch-php","text":"Produces same results as previous console command. <?php use Bartlett\\UmlWriter\\Generator\\GeneratorFactory ; use Bartlett\\UmlWriter\\Service\\ClassDiagramRenderer ; use Symfony\\Component\\Finder\\Finder ; // path to directory where to find PHP source code $dataSource = dirname ( __DIR__ , 2 ) . '/src' ; $finder = new Finder (); $finder -> in ( $dataSource ) -> name ( '*.php' ); $generatorFactory = new GeneratorFactory ( 'graphviz' ); // creates instance of Bartlett\\GraphUml\\Generator\\GraphVizGenerator $generator = $generatorFactory -> getGenerator (); $renderer = new ClassDiagramRenderer (); $options = [ 'show_private' => false , 'show_protected' => false , 'show_constants' => false , 'show_properties' => false , 'node.fillcolor' => '#FEFECE' , 'node.style' => 'filled' , ]; // generates UML class diagram of all objects found in dataSource (in graphviz format) $script = $renderer ( $finder , $generator , $options ); // show UML diagram statements echo $script ; // default format is PNG, change it to SVG $generator -> setFormat ( 'svg' ); echo $generator -> createImageFile ( $renderer -> getGraph ()) . ' file generated' . PHP_EOL ;","title":"Batch PHP"},{"location":"03_Cookbook/03_Custom_autoloader/","text":"Custom Class Autoloader In this example we need a custom autoloader to load non-standard classes. <?php // autoloader/classmap.php /** @var \\Composer\\Autoload\\ClassLoader $loader */ $loader = require dirname ( __DIR__ , 2 ) . '/vendor/autoload.php' ; $loader -> addClassMap ( [ 'Name\\\\Space\\\\Foo' => __DIR__ . '/reflection-properties.php' , 'Name\\\\Space\\\\Bar' => __DIR__ . '/reflection-properties.php' , ] ); Our data source is only one file: reflection-properties.php with such contents <?php namespace Name\\Space ; class Bar { protected $inheritedProperty = 'inheritedDefault' ; } class Foo extends Bar { public $property = 'propertyDefault' ; private $privateProperty = 'privatePropertyDefault' ; public static $staticProperty = 'staticProperty' ; public $defaultlessProperty ; protected static $defaultName ; } Console Command When you're in project folder, invoke diagram:class command with following arguments: bin/umlwriter diagram:class diagram:class examples/autoloader/reflection-properties.php --bootstrap examples/autoloader/classmap.php Will output this graph statements and image look like Batch PHP Produces same results as previous console command. <?php require_once 'autoloader/classmap.php' ; use Bartlett\\UmlWriter\\Generator\\GeneratorFactory ; use Bartlett\\UmlWriter\\Service\\ClassDiagramRenderer ; use Symfony\\Component\\Finder\\Finder ; // path to directory where to find PHP source code $dataSource = __DIR__ . '/autoloader' ; $finder = new Finder (); $finder -> in ( $dataSource ) -> name ( '*.php' ); $generatorFactory = new GeneratorFactory ( 'graphviz' ); // creates instance of Bartlett\\GraphUml\\Generator\\GraphVizGenerator $generator = $generatorFactory -> getGenerator (); $renderer = new ClassDiagramRenderer (); // generates UML class diagram of all objects found in dataSource $script = $renderer ( $finder , $generator ); // show UML diagram statements echo $script ; // default format is PNG, change it to SVG $generator -> setFormat ( 'svg' ); echo $generator -> createImageFile ( $renderer -> getGraph ()) . ' file generated' . PHP_EOL ;","title":"Use a custom class autoloader"},{"location":"03_Cookbook/03_Custom_autoloader/#custom-class-autoloader","text":"In this example we need a custom autoloader to load non-standard classes. <?php // autoloader/classmap.php /** @var \\Composer\\Autoload\\ClassLoader $loader */ $loader = require dirname ( __DIR__ , 2 ) . '/vendor/autoload.php' ; $loader -> addClassMap ( [ 'Name\\\\Space\\\\Foo' => __DIR__ . '/reflection-properties.php' , 'Name\\\\Space\\\\Bar' => __DIR__ . '/reflection-properties.php' , ] ); Our data source is only one file: reflection-properties.php with such contents <?php namespace Name\\Space ; class Bar { protected $inheritedProperty = 'inheritedDefault' ; } class Foo extends Bar { public $property = 'propertyDefault' ; private $privateProperty = 'privatePropertyDefault' ; public static $staticProperty = 'staticProperty' ; public $defaultlessProperty ; protected static $defaultName ; }","title":"Custom Class Autoloader"},{"location":"03_Cookbook/03_Custom_autoloader/#console-command","text":"When you're in project folder, invoke diagram:class command with following arguments: bin/umlwriter diagram:class diagram:class examples/autoloader/reflection-properties.php --bootstrap examples/autoloader/classmap.php Will output this graph statements and image look like","title":"Console Command"},{"location":"03_Cookbook/03_Custom_autoloader/#batch-php","text":"Produces same results as previous console command. <?php require_once 'autoloader/classmap.php' ; use Bartlett\\UmlWriter\\Generator\\GeneratorFactory ; use Bartlett\\UmlWriter\\Service\\ClassDiagramRenderer ; use Symfony\\Component\\Finder\\Finder ; // path to directory where to find PHP source code $dataSource = __DIR__ . '/autoloader' ; $finder = new Finder (); $finder -> in ( $dataSource ) -> name ( '*.php' ); $generatorFactory = new GeneratorFactory ( 'graphviz' ); // creates instance of Bartlett\\GraphUml\\Generator\\GraphVizGenerator $generator = $generatorFactory -> getGenerator (); $renderer = new ClassDiagramRenderer (); // generates UML class diagram of all objects found in dataSource $script = $renderer ( $finder , $generator ); // show UML diagram statements echo $script ; // default format is PNG, change it to SVG $generator -> setFormat ( 'svg' ); echo $generator -> createImageFile ( $renderer -> getGraph ()) . ' file generated' . PHP_EOL ;","title":"Batch PHP"},{"location":"90_For_Developers/1_Generators/","text":"Generators GraPHP UML used at least two components : the mathematical graph/network GraPHP library to draw UML diagrams. any generator that implement the following contract. GraPHP UML uses GraphVizGenerator as default, but allow others that may be registered later at runtime. UmlWrite includes as alternative the GraPHP PlantUML Generator Contract Each generator used to build graph statements should implement following interface. <?php namespace Bartlett\\GraphUml\\Generator ; use Bartlett\\GraphUml\\Formatter\\FormatterInterface ; use Graphp\\Graph\\Graph ; use ReflectionClass ; use ReflectionExtension ; interface GeneratorInterface { public function setOptions ( array $values ) : void ; public function getFormatter () : FormatterInterface ; public function getName () : string ; public function getPrefix () : string ; public function getLabelClass ( ReflectionClass $reflection ) : string ; public function getLabelExtension ( ReflectionExtension $reflection ) : string ; public function setExecutable ( string $executable ) : void ; public function setFormat ( string $format ) : void ; public function createScript ( Graph $graph ) : string ; public function createImageFile ( Graph $graph , string $cmdFormat ) : string ; } setOptions() declares all options used to personalize generator's formatters. getFormatter() is in charge to retrieve instance of a formatter that will produce vertex labels. getName() identifies the generator with a unique name. getPrefix() prefixes all public attributes (graph, node, edge, cluster) only if necessary. getLabelClass() is in charge to make the label of the vertex corresponding to a class or interface element. getLabelExtension() is in charge to make the label of the vertex corresponding to an extension element. setExecutable() changes the executable to use. setFormat() defines the format of image to draw. createScript() is in charge to build graph statements depends on generator used. createImageFile() is in charge to draw image graph in format asked (see setFormat() ). Common functions An AbstractGenerator class allow to implement basic image creation behaviors common to all generators.","title":"Generators"},{"location":"90_For_Developers/1_Generators/#generators","text":"GraPHP UML used at least two components : the mathematical graph/network GraPHP library to draw UML diagrams. any generator that implement the following contract. GraPHP UML uses GraphVizGenerator as default, but allow others that may be registered later at runtime. UmlWrite includes as alternative the GraPHP PlantUML Generator","title":"Generators"},{"location":"90_For_Developers/1_Generators/#contract","text":"Each generator used to build graph statements should implement following interface. <?php namespace Bartlett\\GraphUml\\Generator ; use Bartlett\\GraphUml\\Formatter\\FormatterInterface ; use Graphp\\Graph\\Graph ; use ReflectionClass ; use ReflectionExtension ; interface GeneratorInterface { public function setOptions ( array $values ) : void ; public function getFormatter () : FormatterInterface ; public function getName () : string ; public function getPrefix () : string ; public function getLabelClass ( ReflectionClass $reflection ) : string ; public function getLabelExtension ( ReflectionExtension $reflection ) : string ; public function setExecutable ( string $executable ) : void ; public function setFormat ( string $format ) : void ; public function createScript ( Graph $graph ) : string ; public function createImageFile ( Graph $graph , string $cmdFormat ) : string ; } setOptions() declares all options used to personalize generator's formatters. getFormatter() is in charge to retrieve instance of a formatter that will produce vertex labels. getName() identifies the generator with a unique name. getPrefix() prefixes all public attributes (graph, node, edge, cluster) only if necessary. getLabelClass() is in charge to make the label of the vertex corresponding to a class or interface element. getLabelExtension() is in charge to make the label of the vertex corresponding to an extension element. setExecutable() changes the executable to use. setFormat() defines the format of image to draw. createScript() is in charge to build graph statements depends on generator used. createImageFile() is in charge to draw image graph in format asked (see setFormat() ).","title":"Contract"},{"location":"90_For_Developers/1_Generators/#common-functions","text":"An AbstractGenerator class allow to implement basic image creation behaviors common to all generators.","title":"Common functions"},{"location":"90_For_Developers/2_Creating_a_Generator/","text":"Creating a new Generator You must follow these steps: 1. creates your generator class This class must have implements the GeneratorInterface . <?php namespace Name\\Space ; use Bartlett\\GraphUml\\Formatter\\FormatterInterface ; use Bartlett\\GraphUml\\Formatter\\HtmlFormatter ; use Bartlett\\GraphUml\\Generator\\AbstractGenerator ; use Bartlett\\GraphUml\\Generator\\GeneratorInterface ; use Graphp\\Graph\\Graph ; class MyGenerator extends AbstractGenerator implements GeneratorInterface { public function getFormatter () : FormatterInterface { return new HtmlFormatter ( $this -> options ); } public function getName () : string { return 'mygenerator' ; } public function createScript ( Graph $graph ) : string { return 'TODO: Implement createScript() method.' . PHP_EOL ; } } 2. creates your generator factory class This factory should be able to load your new generator class. <?php namespace Name\\Space ; use Bartlett\\GraphUml\\Generator\\GeneratorInterface ; use Bartlett\\UmlWriter\\Generator\\GeneratorFactory ; class MyGeneratorFactory extends GeneratorFactory { public function getGenerator () : GeneratorInterface { if ( 'mygenerator' === $this -> generator ) { return new MyGenerator (); } // fallback to default GeneratorFactory behavior (checks for GraphViz or PlantUML) return parent :: getGenerator (); } } 3. autoloader Of course your classes must be loadable with your autoloader. <?php /** @var \\Composer\\Autoload\\ClassLoader $loader */ $loader = require dirname ( __DIR__ , 2 ) . '/vendor/autoload.php' ; $loader -> addClassMap ( [ 'Name\\\\Space\\\\MyGeneratorFactory' => __DIR__ . '/my-generator-factory.php' , 'Name\\\\Space\\\\MyGenerator' => __DIR__ . '/my-generator.php' , ] ); 4. on console command Now if you want to use the diagram:class command, you'll need to modify the application launcher bin/launcher to inject the new generator factory in service container. <?php use Bartlett\\UmlWriter\\Console\\Application ; use Bartlett\\UmlWriter\\Service\\ContainerService ; use Bartlett\\UmlWriter\\Generator\\GeneratorFactoryInterface ; use Name\\Space\\MyGeneratorFactory ; $container = new ContainerService (); $container -> set ( GeneratorFactoryInterface :: class , new MyGeneratorFactory ()); $application = new Application ( $container ); $application -> run (); You have then to invoke bin/launcher diagram:class --generator=mygenerator command to get results. 5. on batch mode Alternative way is to use the batch PHP mode. <?php require_once __DIR__ . '/classmap.php' ; use Bartlett\\UmlWriter\\Service\\ClassDiagramRenderer ; use Name\\Space\\MyGeneratorFactory ; use Symfony\\Component\\Finder\\Finder ; // path to directory where to find PHP source code $dataSource = dirname ( __DIR__ , 2 ) . '/src' ; $finder = new Finder (); $finder -> in ( $dataSource ) -> name ( '*.php' ); $generatorFactory = new MyGeneratorFactory ( 'mygenerator' ); // creates instance of Name\\Space\\MyGenerator $generator = $generatorFactory -> getGenerator (); $renderer = new ClassDiagramRenderer (); // generates UML class diagram of all objects found in dataSource $script = $renderer ( $finder , $generator ); // show UML diagram statements echo $script ; Architecture","title":"Creating a new generator"},{"location":"90_For_Developers/2_Creating_a_Generator/#creating-a-new-generator","text":"You must follow these steps:","title":"Creating a new Generator"},{"location":"90_For_Developers/2_Creating_a_Generator/#1-creates-your-generator-class","text":"This class must have implements the GeneratorInterface . <?php namespace Name\\Space ; use Bartlett\\GraphUml\\Formatter\\FormatterInterface ; use Bartlett\\GraphUml\\Formatter\\HtmlFormatter ; use Bartlett\\GraphUml\\Generator\\AbstractGenerator ; use Bartlett\\GraphUml\\Generator\\GeneratorInterface ; use Graphp\\Graph\\Graph ; class MyGenerator extends AbstractGenerator implements GeneratorInterface { public function getFormatter () : FormatterInterface { return new HtmlFormatter ( $this -> options ); } public function getName () : string { return 'mygenerator' ; } public function createScript ( Graph $graph ) : string { return 'TODO: Implement createScript() method.' . PHP_EOL ; } }","title":"1. creates your generator class"},{"location":"90_For_Developers/2_Creating_a_Generator/#2-creates-your-generator-factory-class","text":"This factory should be able to load your new generator class. <?php namespace Name\\Space ; use Bartlett\\GraphUml\\Generator\\GeneratorInterface ; use Bartlett\\UmlWriter\\Generator\\GeneratorFactory ; class MyGeneratorFactory extends GeneratorFactory { public function getGenerator () : GeneratorInterface { if ( 'mygenerator' === $this -> generator ) { return new MyGenerator (); } // fallback to default GeneratorFactory behavior (checks for GraphViz or PlantUML) return parent :: getGenerator (); } }","title":"2. creates your generator factory class"},{"location":"90_For_Developers/2_Creating_a_Generator/#3-autoloader","text":"Of course your classes must be loadable with your autoloader. <?php /** @var \\Composer\\Autoload\\ClassLoader $loader */ $loader = require dirname ( __DIR__ , 2 ) . '/vendor/autoload.php' ; $loader -> addClassMap ( [ 'Name\\\\Space\\\\MyGeneratorFactory' => __DIR__ . '/my-generator-factory.php' , 'Name\\\\Space\\\\MyGenerator' => __DIR__ . '/my-generator.php' , ] );","title":"3. autoloader"},{"location":"90_For_Developers/2_Creating_a_Generator/#4-on-console-command","text":"Now if you want to use the diagram:class command, you'll need to modify the application launcher bin/launcher to inject the new generator factory in service container. <?php use Bartlett\\UmlWriter\\Console\\Application ; use Bartlett\\UmlWriter\\Service\\ContainerService ; use Bartlett\\UmlWriter\\Generator\\GeneratorFactoryInterface ; use Name\\Space\\MyGeneratorFactory ; $container = new ContainerService (); $container -> set ( GeneratorFactoryInterface :: class , new MyGeneratorFactory ()); $application = new Application ( $container ); $application -> run (); You have then to invoke bin/launcher diagram:class --generator=mygenerator command to get results.","title":"4. on console command"},{"location":"90_For_Developers/2_Creating_a_Generator/#5-on-batch-mode","text":"Alternative way is to use the batch PHP mode. <?php require_once __DIR__ . '/classmap.php' ; use Bartlett\\UmlWriter\\Service\\ClassDiagramRenderer ; use Name\\Space\\MyGeneratorFactory ; use Symfony\\Component\\Finder\\Finder ; // path to directory where to find PHP source code $dataSource = dirname ( __DIR__ , 2 ) . '/src' ; $finder = new Finder (); $finder -> in ( $dataSource ) -> name ( '*.php' ); $generatorFactory = new MyGeneratorFactory ( 'mygenerator' ); // creates instance of Name\\Space\\MyGenerator $generator = $generatorFactory -> getGenerator (); $renderer = new ClassDiagramRenderer (); // generates UML class diagram of all objects found in dataSource $script = $renderer ( $finder , $generator ); // show UML diagram statements echo $script ;","title":"5. on batch mode"},{"location":"90_For_Developers/2_Creating_a_Generator/#architecture","text":"","title":"Architecture"}]}