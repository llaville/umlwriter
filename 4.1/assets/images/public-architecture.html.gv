digraph {
  graph [name="G" overlap="false" rankdir="TB" bgcolor="transparent"]
  node [fontname="Verdana" fontsize=8 shape="none" margin=0 fillcolor="#FEFECE" style="filled"]
  edge [fontname="Verdana" fontsize=8]
  subgraph cluster_0 {
    label = "Bartlett\\UmlWriter\\Service"
    "Bartlett\\UmlWriter\\Service\\ConfigurationHandler" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b><br/>ConfigurationHandler</b></td></tr>
    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
    <tr><td align="left">+ __construct(filename : string = «unknown»)</td></tr>
    <tr><td align="left">+ «static» getDefaults() : array</td></tr>
    <tr><td align="left">+ toArray() : array</td></tr>
    <tr><td align="left">+ toFlat() : array</td></tr>
</table></td></tr>
</table>>]
    "Bartlett\\UmlWriter\\Service\\ContainerService" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b><br/>ContainerService</b></td></tr>
    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
    <tr><td align="left">+ __construct()</td></tr>
    <tr><td align="left">+ set(id : string, service : mixed) : void</td></tr>
    <tr><td align="left">+ get(id : string) : ?mixed</td></tr>
    <tr><td align="left">+ has(id : string) : bool</td></tr>
</table></td></tr>
</table>>]
    "Bartlett\\UmlWriter\\Service\\ClassDiagramRenderer" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b><br/>ClassDiagramRenderer</b></td></tr>
    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
    <tr><td align="left">+ __invoke(datasource, generator : Bartlett\\GraphUml\\Generator\\GeneratorInterface, parameters : array = []) : Graphp\\Graph\\Graph</td></tr>
    <tr><td align="left">+ getMetadata() : array</td></tr>
</table></td></tr>
</table>>]
  }
  subgraph cluster_1 {
    label = "Psr\\Container"
    "Psr\\Container\\ContainerInterface" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b>«interface»<br/>ContainerInterface</b></td></tr>
    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
    <tr><td align="left">+ «abstract» get(id : string)</td></tr>
    <tr><td align="left">+ «abstract» has(id : string) : bool</td></tr>
</table></td></tr>
</table>>]
  }
  subgraph cluster_2 {
    label = "Bartlett\\UmlWriter\\Console"
    "Bartlett\\UmlWriter\\Console\\Application" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b><br/>Application</b></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
    <tr><td align="left">+ «static» NAME : string = "umlWriter" {readOnly}</td></tr>
</table></td></tr>
    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
    <tr><td align="left">+ __construct(container : Psr\\Container\\ContainerInterface)</td></tr>
    <tr><td align="left">+ getHelp() : string</td></tr>
    <tr><td align="left">+ getLongVersion() : string</td></tr>
    <tr><td align="left">+ doRun(input : Symfony\\Component\\Console\\Input\\InputInterface, output : Symfony\\Component\\Console\\Output\\OutputInterface) : int</td></tr>
    <tr><td align="left">+ run(input : Symfony\\Component\\Console\\Input\\InputInterface = «unknown», output : Symfony\\Component\\Console\\Output\\OutputInterface = «unknown») : int</td></tr>
</table></td></tr>
</table>>]
  }
  subgraph cluster_3 {
    label = "Symfony\\Component\\Console"
    "Symfony\\Component\\Console\\Application" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b><br/>Application</b></td></tr>
    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
    <tr><td align="left">+ __construct(name : string = 'UNKNOWN', version : string = 'UNKNOWN')</td></tr>
    <tr><td align="left">+ setDispatcher(dispatcher : Symfony\\Contracts\\EventDispatcher\\EventDispatcherInterface) : void</td></tr>
    <tr><td align="left">+ setCommandLoader(commandLoader : Symfony\\Component\\Console\\CommandLoader\\CommandLoaderInterface)</td></tr>
    <tr><td align="left">+ getSignalRegistry() : Symfony\\Component\\Console\\SignalRegistry\\SignalRegistry</td></tr>
    <tr><td align="left">+ setSignalsToDispatchEvent(signalsToDispatchEvent : int = «unknown»)</td></tr>
    <tr><td align="left">+ run(input : Symfony\\Component\\Console\\Input\\InputInterface = «unknown», output : Symfony\\Component\\Console\\Output\\OutputInterface = «unknown») : int</td></tr>
    <tr><td align="left">+ doRun(input : Symfony\\Component\\Console\\Input\\InputInterface, output : Symfony\\Component\\Console\\Output\\OutputInterface)</td></tr>
    <tr><td align="left">+ reset()</td></tr>
    <tr><td align="left">+ setHelperSet(helperSet : Symfony\\Component\\Console\\Helper\\HelperSet)</td></tr>
    <tr><td align="left">+ getHelperSet() : Symfony\\Component\\Console\\Helper\\HelperSet</td></tr>
    <tr><td align="left">+ setDefinition(definition : Symfony\\Component\\Console\\Input\\InputDefinition)</td></tr>
    <tr><td align="left">+ getDefinition() : Symfony\\Component\\Console\\Input\\InputDefinition</td></tr>
    <tr><td align="left">+ complete(input : Symfony\\Component\\Console\\Completion\\CompletionInput, suggestions : Symfony\\Component\\Console\\Completion\\CompletionSuggestions) : void</td></tr>
    <tr><td align="left">+ getHelp() : string</td></tr>
    <tr><td align="left">+ areExceptionsCaught() : bool</td></tr>
    <tr><td align="left">+ setCatchExceptions(boolean : bool)</td></tr>
    <tr><td align="left">+ setCatchErrors(catchErrors : bool = true) : void</td></tr>
    <tr><td align="left">+ isAutoExitEnabled() : bool</td></tr>
    <tr><td align="left">+ setAutoExit(boolean : bool)</td></tr>
    <tr><td align="left">+ getName() : string</td></tr>
    <tr><td align="left">+ setName(name : string)</td></tr>
    <tr><td align="left">+ getVersion() : string</td></tr>
    <tr><td align="left">+ setVersion(version : string)</td></tr>
    <tr><td align="left">+ getLongVersion()</td></tr>
    <tr><td align="left">+ register(name : string) : Symfony\\Component\\Console\\Command\\Command</td></tr>
    <tr><td align="left">+ addCommands(commands : array)</td></tr>
    <tr><td align="left">+ add(command : Symfony\\Component\\Console\\Command\\Command)</td></tr>
    <tr><td align="left">+ get(name : string)</td></tr>
    <tr><td align="left">+ has(name : string) : bool</td></tr>
    <tr><td align="left">+ getNamespaces() : array</td></tr>
    <tr><td align="left">+ findNamespace(namespace : string) : string</td></tr>
    <tr><td align="left">+ find(name : string)</td></tr>
    <tr><td align="left">+ all(namespace : string = «unknown»)</td></tr>
    <tr><td align="left">+ «static» getAbbreviations(names : array) : array</td></tr>
    <tr><td align="left">+ renderThrowable(e : Throwable, output : Symfony\\Component\\Console\\Output\\OutputInterface) : void</td></tr>
    <tr><td align="left">+ extractNamespace(name : string, limit : int = «unknown») : string</td></tr>
    <tr><td align="left">+ setDefaultCommand(commandName : string, isSingleCommand : bool = false) : static</td></tr>
    <tr><td align="left">+ isSingleCommand() : bool</td></tr>
</table></td></tr>
</table>>]
  }
  subgraph cluster_4 {
    label = "Symfony\\Contracts\\Service"
    "Symfony\\Contracts\\Service\\ResetInterface" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b>«interface»<br/>ResetInterface</b></td></tr>
    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
    <tr><td align="left">+ «abstract» reset()</td></tr>
</table></td></tr>
</table>>]
  }
  subgraph cluster_5 {
    label = "Bartlett\\UmlWriter\\Console\\Command"
    "Bartlett\\UmlWriter\\Console\\Command\\ClassDiagramCommand" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b><br/>ClassDiagramCommand</b></td></tr>
    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
    <tr><td align="left">+ __construct(renderer : Bartlett\\UmlWriter\\Service\\ClassDiagramRenderer, generatorFactory : Bartlett\\UmlWriter\\Generator\\GeneratorFactoryInterface, name : string = «unknown»)</td></tr>
</table></td></tr>
</table>>]
  }
  subgraph cluster_6 {
    label = "Symfony\\Component\\Console\\Command"
    "Symfony\\Component\\Console\\Command\\Command" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b><br/>Command</b></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
    <tr><td align="left">+ «static» SUCCESS : int = 0 {readOnly}</td></tr>
    <tr><td align="left">+ «static» FAILURE : int = 1 {readOnly}</td></tr>
    <tr><td align="left">+ «static» INVALID : int = 2 {readOnly}</td></tr>
</table></td></tr>
    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
    <tr><td align="left">+ «static» getDefaultName() : ?string</td></tr>
    <tr><td align="left">+ «static» getDefaultDescription() : ?string</td></tr>
    <tr><td align="left">+ __construct(name : string = «unknown»)</td></tr>
    <tr><td align="left">+ ignoreValidationErrors()</td></tr>
    <tr><td align="left">+ setApplication(application : Symfony\\Component\\Console\\Application = «unknown»)</td></tr>
    <tr><td align="left">+ setHelperSet(helperSet : Symfony\\Component\\Console\\Helper\\HelperSet)</td></tr>
    <tr><td align="left">+ getHelperSet() : ?Symfony\\Component\\Console\\Helper\\HelperSet</td></tr>
    <tr><td align="left">+ getApplication() : ?Symfony\\Component\\Console\\Application</td></tr>
    <tr><td align="left">+ isEnabled()</td></tr>
    <tr><td align="left">+ run(input : Symfony\\Component\\Console\\Input\\InputInterface, output : Symfony\\Component\\Console\\Output\\OutputInterface) : int</td></tr>
    <tr><td align="left">+ complete(input : Symfony\\Component\\Console\\Completion\\CompletionInput, suggestions : Symfony\\Component\\Console\\Completion\\CompletionSuggestions) : void</td></tr>
    <tr><td align="left">+ setCode(code : callable) : static</td></tr>
    <tr><td align="left">+ mergeApplicationDefinition(mergeArgs : bool = true) : void</td></tr>
    <tr><td align="left">+ setDefinition(definition) : static</td></tr>
    <tr><td align="left">+ getDefinition() : Symfony\\Component\\Console\\Input\\InputDefinition</td></tr>
    <tr><td align="left">+ getNativeDefinition() : Symfony\\Component\\Console\\Input\\InputDefinition</td></tr>
    <tr><td align="left">+ addArgument(name : string, mode : int = «unknown», description : string = '', default : mixed = «unknown») : static</td></tr>
    <tr><td align="left">+ addOption(name : string, shortcut = «unknown», mode : int = «unknown», description : string = '', default : mixed = «unknown») : static</td></tr>
    <tr><td align="left">+ setName(name : string) : static</td></tr>
    <tr><td align="left">+ setProcessTitle(title : string) : static</td></tr>
    <tr><td align="left">+ getName() : ?string</td></tr>
    <tr><td align="left">+ setHidden(hidden : bool = true) : static</td></tr>
    <tr><td align="left">+ isHidden() : bool</td></tr>
    <tr><td align="left">+ setDescription(description : string) : static</td></tr>
    <tr><td align="left">+ getDescription() : string</td></tr>
    <tr><td align="left">+ setHelp(help : string) : static</td></tr>
    <tr><td align="left">+ getHelp() : string</td></tr>
    <tr><td align="left">+ getProcessedHelp() : string</td></tr>
    <tr><td align="left">+ setAliases(aliases : iterable) : static</td></tr>
    <tr><td align="left">+ getAliases() : array</td></tr>
    <tr><td align="left">+ getSynopsis(short : bool = false) : string</td></tr>
    <tr><td align="left">+ addUsage(usage : string) : static</td></tr>
    <tr><td align="left">+ getUsages() : array</td></tr>
    <tr><td align="left">+ getHelper(name : string) : ?mixed</td></tr>
</table></td></tr>
</table>>]
  }
  subgraph cluster_7 {
    label = "Bartlett\\UmlWriter\\Config\\Loader"
    "Bartlett\\UmlWriter\\Config\\Loader\\YamlFileLoader" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b><br/>YamlFileLoader</b></td></tr>
    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
    <tr><td align="left">+ load(resource : mixed, type : string = «unknown») : array</td></tr>
    <tr><td align="left">+ supports(resource, type : string = «unknown») : bool</td></tr>
</table></td></tr>
</table>>]
  }
  subgraph cluster_8 {
    label = "Symfony\\Component\\Config\\Loader"
    "Symfony\\Component\\Config\\Loader\\FileLoader" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b>«abstract»<br/>FileLoader</b></td></tr>
    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
    <tr><td align="left">+ __construct(locator : Symfony\\Component\\Config\\FileLocatorInterface, env : string = «unknown»)</td></tr>
    <tr><td align="left">+ setCurrentDir(dir : string)</td></tr>
    <tr><td align="left">+ getLocator() : Symfony\\Component\\Config\\FileLocatorInterface</td></tr>
    <tr><td align="left">+ import(resource : mixed, type : string = «unknown», ignoreErrors : bool = false, sourceResource : string = «unknown», exclude : mixed = «unknown»)</td></tr>
</table></td></tr>
</table>>]
    "Symfony\\Component\\Config\\Loader\\Loader" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b>«abstract»<br/>Loader</b></td></tr>
    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
    <tr><td align="left">+ __construct(env : string = «unknown»)</td></tr>
    <tr><td align="left">+ getResolver() : Symfony\\Component\\Config\\Loader\\LoaderResolverInterface</td></tr>
    <tr><td align="left">+ setResolver(resolver : Symfony\\Component\\Config\\Loader\\LoaderResolverInterface)</td></tr>
    <tr><td align="left">+ import(resource : mixed, type : string = «unknown»)</td></tr>
    <tr><td align="left">+ resolve(resource : mixed, type : string = «unknown») : Symfony\\Component\\Config\\Loader\\LoaderInterface</td></tr>
</table></td></tr>
</table>>]
    "Symfony\\Component\\Config\\Loader\\LoaderInterface" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b>«interface»<br/>LoaderInterface</b></td></tr>
    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
    <tr><td align="left">+ «abstract» load(resource : mixed, type : string = «unknown»)</td></tr>
    <tr><td align="left">+ «abstract» supports(resource : mixed, type : string = «unknown»)</td></tr>
    <tr><td align="left">+ «abstract» getResolver()</td></tr>
    <tr><td align="left">+ «abstract» setResolver(resolver : Symfony\\Component\\Config\\Loader\\LoaderResolverInterface)</td></tr>
</table></td></tr>
</table>>]
  }
  subgraph cluster_9 {
    label = "Bartlett\\UmlWriter\\Generator"
    "Bartlett\\UmlWriter\\Generator\\GeneratorFactoryInterface" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b>«interface»<br/>GeneratorFactoryInterface</b></td></tr>
    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
    <tr><td align="left">+ «abstract» createInstance(provider : string, format : string, executable : string) : Bartlett\\GraphUml\\Generator\\GeneratorInterface</td></tr>
</table></td></tr>
</table>>]
    "Bartlett\\UmlWriter\\Generator\\GeneratorFactory" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b><br/>GeneratorFactory</b></td></tr>
    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
    <tr><td align="left">+ createInstance(provider : string, format : string = 'svg', executable : string = '') : Bartlett\\GraphUml\\Generator\\GeneratorInterface</td></tr>
</table></td></tr>
</table>>]
  }
  "Bartlett\\UmlWriter\\Service\\ContainerService" -> "Psr\\Container\\ContainerInterface" [arrowhead="empty" style="dashed"]
  "Symfony\\Component\\Console\\Application" -> "Symfony\\Contracts\\Service\\ResetInterface" [arrowhead="empty" style="dashed"]
  "Bartlett\\UmlWriter\\Console\\Application" -> "Symfony\\Component\\Console\\Application" [arrowhead="empty" style="filled"]
  "Bartlett\\UmlWriter\\Console\\Command\\ClassDiagramCommand" -> "Symfony\\Component\\Console\\Command\\Command" [arrowhead="empty" style="filled"]
  "Symfony\\Component\\Config\\Loader\\Loader" -> "Symfony\\Component\\Config\\Loader\\LoaderInterface" [arrowhead="empty" style="dashed"]
  "Symfony\\Component\\Config\\Loader\\FileLoader" -> "Symfony\\Component\\Config\\Loader\\Loader" [arrowhead="empty" style="filled"]
  "Bartlett\\UmlWriter\\Config\\Loader\\YamlFileLoader" -> "Symfony\\Component\\Config\\Loader\\FileLoader" [arrowhead="empty" style="filled"]
  "Bartlett\\UmlWriter\\Generator\\GeneratorFactory" -> "Bartlett\\UmlWriter\\Generator\\GeneratorFactoryInterface" [arrowhead="empty" style="dashed"]
}
