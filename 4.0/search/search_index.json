{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#about","title":"About","text":""},{"location":"#features","title":"Features","text":"<p>The main features provided by this library are:</p> <ul> <li>Parse one to many PHP file</li> <li>Parse one to many directory</li> <li>Configuration is handled by a YAML file or console command arguments</li> <li>build UML statements of a class diagram</li> <li>draw png/svg image formats if backends installed (graphviz, plantuml server)</li> <li>two generators provided by default:</li> </ul> GraphViz PlantUML <p>Currently, the following language features are supported:</p> <ul> <li>Property and method visibility</li> <li>Static properties and methods</li> <li>Method return types natively and from doc comment</li> <li>Parameter types from type hinting and doc comment</li> <li>Parameter default values</li> <li>Class constants with value</li> <li>Property types from doc comment</li> <li>Property default values</li> <li>Implemented interfaces and parent classes</li> <li>Abstract classes</li> </ul>"},{"location":"getting-started/","title":"Getting-Started","text":""},{"location":"getting-started/#getting-started","title":"Getting started","text":""},{"location":"getting-started/#requirements","title":"Requirements","text":"<ul> <li>PHP 8.1 or greater</li> <li>graphp/graph package from master branch (considered as future stable v1.0.0)</li> <li>graphp/graphviz package from master branch (considered as future stable v1.0.0)</li> <li>bartlett/graph-uml Core engine to build UML diagrams in PHP</li> <li>bartlett/graph-plantuml-generator A PlantUML generator for graph-uml.</li> <li>roave/better-reflection the Reflection API</li> </ul>"},{"location":"getting-started/#installation","title":"Installation","text":""},{"location":"getting-started/#with-composer","title":"With Composer","text":"<p>The recommended way to install this library is through composer. If you don't know yet what is composer, have a look on introduction.</p> <pre><code>composer require bartlett/umlwriter ^4\n</code></pre>"},{"location":"getting-started/#with-git","title":"With Git","text":"<p>The UmlWriter can be directly used from GitHub by cloning the repository into a directory of your choice.</p> <pre><code>git clone -b 4.0 https://github.com/llaville/umlwriter.git\n</code></pre> <p>Additionally, you'll have to install GraphViz (<code>dot</code> executable) and/or PlantUML jar with Java Runtime (java executable). Users of Debian/Ubuntu-based distributions may simply invoke:</p> <pre><code>sudo apt update\nsudo apt-get install graphviz\nsudo apt-get install openjdk-11-jre-headless\n</code></pre> <p>while remaining users should install from GraphViz Download page and from PlantUML Download page.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installation","title":"Installation","text":"<ol> <li>Requirements</li> <li>PHAR</li> <li>Docker</li> <li>Phive</li> <li>Composer</li> </ol>"},{"location":"installation/#requirements","title":"Requirements","text":"Version Status Requirements 4.0 Active development PHP &gt;= 8.1 3.4 Active support PHP &gt;= 8.0 2.x End Of Life PHP &gt;= 7.1"},{"location":"installation/#phar","title":"PHAR","text":"<p>The preferred method of installation is to use the UmlWriter PHAR which can be downloaded from the most recent Github Release. This method ensures you will not have any dependency conflict issue.</p>"},{"location":"installation/#docker","title":"Docker","text":"<p>You can install <code>umlwriter</code> with Docker</p> <pre><code>docker pull ghcr.io/llaville/umlwriter:v4\nor\ndocker pull ghcr.io/llaville/umlwriter:latest\n</code></pre>"},{"location":"installation/#phive","title":"Phive","text":"<p>You can install <code>umlwriter</code> with Phive</p> <pre><code>phive install llaville/umlwriter --force-accept-unsigned\n</code></pre> <p>To upgrade <code>umlwriter</code> use the following command:</p> <pre><code>phive update llaville/umlwriter --force-accept-unsigned\n</code></pre>"},{"location":"installation/#composer","title":"Composer","text":"<p>You can install <code>umlwriter</code> with Composer</p> <pre><code>composer global require bartlett/umlwriter ^4\n</code></pre> <p>If you cannot install it because of a dependency conflict, or you prefer to install it for your project, we recommend you to take a look at bamarni/composer-bin-plugin. Example:</p> <pre><code>composer require --dev bamarni/composer-bin-plugin\ncomposer bin umlwriter require --dev bartlett/umlwriter\n\nvendor/bin/umlwriter\n</code></pre>"},{"location":"01_Features/Configuration/","title":"Configuration","text":""},{"location":"01_Features/Configuration/#configuration","title":"Configuration","text":"<p>UmlWriter v3 can be configured in two ways (YAML file or console command arguments). Without changes, following defaults will be applied.</p>"},{"location":"01_Features/Configuration/#defaults","title":"Defaults","text":"Option Value Default Description show_constants boolean true whether to show class constants as readonly static variables (or just omit them completely) show_properties boolean true whether to show class properties show_methods boolean true whether to show class or interface methods show_private boolean true whether to also show private methods/properties show_protected boolean true whether to also show protected methods/properties add_parents boolean true whether to show add parent classes or interfaces only_self boolean true whether to only show methods/properties that are actually defined in this class  (and not those merely inherited from base) label_format string record whether to use html or record formatted labels (graphviz specific feature). Others generator may have different values indent_string string '  ' string to indent graph statement parts (two blanks) paths array ['src'] data source (file or directory) to parse generator string graphviz identification returned by <code>getName()</code> method  of a class implementing <code>Bartlett\\GraphUml\\Generator\\GeneratorInterface</code> graph.name string G name of the graph graph.overlap boolean false determines if and how node overlaps should be removed.  More details at http://graphviz.org/doc/info/attrs.html#d:overlap graph.rankdir string TB sets direction of graph layout (Top to Bottom).  See http://graphviz.org/doc/info/attrs.html#d:rankdir node.fontname string Verdana font name to use to draw node of the graph node.fontsize integer 8 font size to draw node of the graph node.shape string none set the shape of nodes node.margin integer 0 see http://graphviz.org/doc/info/attrs.html#d:margin for details node.fillcolor string #FEFECE color used to fill background color of nodes.  See http://graphviz.org/doc/info/attrs.html#d:fillcolor node.style string filled see http://graphviz.org/doc/info/attrs.html#d:style edge.fontname string Verdana font name to use to draw edge of the graph edge.fontsize integer 8 font size to draw edge of the graph"},{"location":"01_Features/Configuration/#console-command","title":"Console command","text":"<p>See all arguments and options details in Console Commands section.</p>"},{"location":"01_Features/Configuration/#yaml-file-example","title":"YAML file (example)","text":"<p>Attributes to configure graph (node, edge, cluster) may be found at:</p> <ul> <li>https://graphviz.gitlab.io/_pages/doc/info/attrs.html</li> </ul> <p>And to configure colors for graphviz and plantuml generators:</p> <ul> <li>https://graphviz.gitlab.io/_pages/doc/info/colors.html</li> <li>https://plantuml.com/en/color</li> </ul> <pre><code>parameters:\n    generator: graphviz\n\n    graph:\n        name: G\n        overlap: 'false'\n        rankdir: LR\n        bgcolor: transparent\n\n    node:\n        fillcolor: '#FEFECE'\n        style: filled\n\n    edge: ~\n\n    cluster:\n        Bartlett\\UmlWriter\\Console:\n            graph:\n                bgcolor: BurlyWood\n        Symfony\\Component\\Console:\n            graph:\n                bgcolor: LightSteelBlue\n        Symfony\\Contracts\\Service:\n            graph:\n                bgcolor: LightSteelBlue\n\n    paths:\n        - src/\n\n    show_constants: true\n    show_properties: true\n    show_methods: true\n    show_private: false\n    show_protected: false\n</code></pre>"},{"location":"01_Features/Configuration/#architecture","title":"Architecture","text":""},{"location":"01_Features/Services/","title":"Services","text":""},{"location":"01_Features/Services/#services","title":"Services","text":"<p>UmlWriter v3 contains two different services.</p> <ul> <li> <p>ContainerService implements a PSR-11 compatible service container that allows you to standardize and centralize the way objects are constructed.</p> </li> <li> <p>ClassDiagramRenderer that is in charge to add vertices and edges in the graph corresponding to data source(s) parsed.</p> </li> </ul>"},{"location":"01_Features/Services/#service-container","title":"Service Container","text":"<p>We distinguish two kind of services:</p> <ul> <li>internal like <code>ClassDiagramRenderer</code> and <code>ClassDiagramCommand</code> that cannot be changed at runtime.</li> <li>runtime like <code>InputInterface</code>, <code>OutputInterface</code> and <code>GeneratorFactoryInterface</code> (the others) that could be changed.</li> </ul>"},{"location":"01_Features/Services/#class-diagram-renderer","title":"Class Diagram Renderer","text":"<ul> <li> <p>Is in charge to add vertices and edge with the <code>__invoke()</code> method.</p> </li> <li> <p><code>getGraph()</code> method allows retrieving current graph to let you ability to personalize render by setting graph, node or edge attributes.</p> </li> <li> <p>Is able to retrieve all namespaces, classes, interfaces found during parse data source with <code>getMetadata()</code> method.</p> </li> </ul> <pre><code>&lt;?php\n// Example\n\nuse Bartlett\\UmlWriter\\Generator\\GeneratorFactory;\nuse Bartlett\\UmlWriter\\Service\\ClassDiagramRenderer;\nuse Symfony\\Component\\Finder\\Finder;\n\n// path to directory where to find PHP source code\n$dataSource = 'src';\n\n$finder = new Finder();\n$finder-&gt;in($dataSource)-&gt;name('*.php');\n\n$generatorFactory = new GeneratorFactory('graphviz');\n// creates instance of Bartlett\\GraphUml\\Generator\\GraphVizGenerator\n$generator = $generatorFactory-&gt;getGenerator();\n\n$renderer = new ClassDiagramRenderer();\n// generates UML class diagram of all objects found in dataSource (in graphviz format)\n$script = $renderer($finder, $generator);\n// show all metadata\nvar_dump($renderer-&gt;getMetadata());\n</code></pre> <p>That could produce such results (with UmlWriter src directory)</p> <pre><code>array(3) {\n  [\"classes\"]=&gt;\n  array(8) {\n    [0]=&gt;\n    string(53) \"Bartlett\\UmlWriter\\Generator\\AbstractGeneratorFactory\"\n    [1]=&gt;\n    string(45) \"Bartlett\\UmlWriter\\Generator\\GeneratorFactory\"\n    [2]=&gt;\n    string(47) \"Bartlett\\UmlWriter\\Service\\ConfigurationHandler\"\n    [3]=&gt;\n    string(47) \"Bartlett\\UmlWriter\\Service\\ClassDiagramRenderer\"\n    [4]=&gt;\n    string(43) \"Bartlett\\UmlWriter\\Service\\ContainerService\"\n    [5]=&gt;\n    string(38) \"Bartlett\\UmlWriter\\Console\\Application\"\n    [6]=&gt;\n    string(54) \"Bartlett\\UmlWriter\\Console\\Command\\ClassDiagramCommand\"\n    [7]=&gt;\n    string(47) \"Bartlett\\UmlWriter\\Config\\Loader\\YamlFileLoader\"\n  }\n  [\"interfaces\"]=&gt;\n  array(1) {\n    [0]=&gt;\n    string(54) \"Bartlett\\UmlWriter\\Generator\\GeneratorFactoryInterface\"\n  }\n  [\"namespaces\"]=&gt;\n  array(5) {\n    [0]=&gt;\n    string(28) \"Bartlett\\UmlWriter\\Generator\"\n    [3]=&gt;\n    string(26) \"Bartlett\\UmlWriter\\Service\"\n    [6]=&gt;\n    string(26) \"Bartlett\\UmlWriter\\Console\"\n    [7]=&gt;\n    string(34) \"Bartlett\\UmlWriter\\Console\\Command\"\n    [8]=&gt;\n    string(32) \"Bartlett\\UmlWriter\\Config\\Loader\"\n  }\n}\n</code></pre>"},{"location":"01_Features/Services/#architecture","title":"Architecture","text":""},{"location":"02_Console_Commands/diagram_class/","title":"Class diagrams","text":""},{"location":"02_Console_Commands/diagram_class/#class-diagrams","title":"Class Diagrams","text":"<p>UmlWriter v3 includes only one command <code>diagram:class</code> to print UML class diagram statements.</p>"},{"location":"02_Console_Commands/diagram_class/#features","title":"Features","text":"<ul> <li>Parse one to many data source (file or directory) at same times with <code>paths</code> argument.</li> <li>Show (default) or hide all class constants by <code>--without-constants</code> option.</li> <li>Show (default) or hide all class properties by <code>--without-properties</code> option.</li> <li>Show (default) or hide all class methods by <code>--without-methods</code> option.</li> <li>Show (default) or hide private methods and private properties by <code>--hide-private</code> options.</li> <li>Show (default) or hide protected methods and protected properties by <code>--hide-protected</code> options.</li> <li>Can be use your own autoloader and initialize what ever you want by <code>--bootstrap</code> option.</li> <li>Use either <code>GraphViz</code>, <code>PlantUml</code> or your own generator by <code>--generator</code> option.</li> <li>Can be able to configure all graph render options and more by <code>--configuration</code> option.</li> </ul>"},{"location":"02_Console_Commands/diagram_class/#synoptic","title":"Synoptic","text":"<pre><code>Description:\n  Generate class diagram statements of a given data source\n\nUsage:\n  diagram:class [options] [--] [&lt;paths&gt;...]\n\nArguments:\n  paths                              Data source (file or directory)\n\nOptions:\n  -o, --output=OUTPUT                Path to output image file\n      --format=FORMAT                Set output format (depending of each generator)\n      --generator=GENERATOR          Graph generator\n      --bootstrap=BOOTSTRAP          A PHP script that is included before graph run\n  -c, --configuration=CONFIGURATION  Read configuration from YAML file\n      --without-constants            Hide all class constants\n      --without-properties           Hide all class properties\n      --without-methods              Hide all class methods\n      --hide-private                 Hide private methods/properties\n      --hide-protected               Hide protected methods/properties\n      --no-statement                 Do not show diagram statements\n  -h, --help                         Display this help message\n  -q, --quiet                        Do not output any message\n  -V, --version                      Display this application version\n      --ansi                         Force ANSI output\n      --no-ansi                      Disable ANSI output\n  -n, --no-interaction               Do not ask any interactive question\n  -v|vv|vvv, --verbose               Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug\n</code></pre>"},{"location":"02_Console_Commands/diagram_class/#examples","title":"Examples","text":"<p>Here are a list of concrete examples you can find in Cookbook</p> <ul> <li>Show only public elements in UmlWriter architecture</li> <li>Show only public methods in UmlWriter architecture</li> <li>Use a custom autoloader</li> </ul>"},{"location":"02_Console_Commands/diagram_class/#architecture","title":"Architecture","text":""},{"location":"03_Cookbook/01_UmlWriter_public_architecture/","title":"Application diagram","text":""},{"location":"03_Cookbook/01_UmlWriter_public_architecture/#architecture-diagram","title":"Architecture Diagram","text":"<p>Generate UmlWriter graph architecture with only public elements and default render options.</p>"},{"location":"03_Cookbook/01_UmlWriter_public_architecture/#console-command","title":"Console Command","text":"<p>When you're in project folder, invoke <code>diagram:class</code> command with following arguments:</p> <pre><code>bin/umlwriter diagram:class src/ --hide-private --hide-protected --format=svg\n</code></pre> <p>Will output this graph statements and image look like</p> <p></p>"},{"location":"03_Cookbook/01_UmlWriter_public_architecture/#batch-php","title":"Batch PHP","text":"<p>Produces same results as previous console command.</p> <pre><code>&lt;?php\nuse Bartlett\\UmlWriter\\Generator\\GeneratorFactory;\nuse Bartlett\\UmlWriter\\Service\\ClassDiagramRenderer;\nuse Symfony\\Component\\Finder\\Finder;\n\n// path to directory where to find PHP source code\n$dataSource = dirname(__DIR__) . '/src';\n\n$finder = new Finder();\n$finder-&gt;in($dataSource)-&gt;name('*.php');\n\n$generatorFactory = new GeneratorFactory('graphviz');\n// creates instance of Bartlett\\GraphUml\\Generator\\GraphVizGenerator\n$generator = $generatorFactory-&gt;getGenerator();\n\n$renderer = new ClassDiagramRenderer();\n$options = [\n    'show_private' =&gt; false,\n    'show_protected' =&gt; false,\n    'node.fillcolor' =&gt; '#FEFECE',\n    'node.style' =&gt; 'filled',\n];\n// generates UML class diagram of all objects found in dataSource (in graphviz format)\n$script = $renderer($finder, $generator, $options);\n// show UML diagram statements\necho $script;\n\n// default format is PNG, change it to SVG\n$generator-&gt;setFormat('svg');\necho $generator-&gt;createImageFile($renderer-&gt;getGraph()) . ' file generated' . PHP_EOL;\n</code></pre>"},{"location":"03_Cookbook/02_UmlWriter_public_methods_only/","title":"Application diagram with public methods only","text":""},{"location":"03_Cookbook/02_UmlWriter_public_methods_only/#architecture-diagram-public-visibility","title":"Architecture Diagram (public visibility)","text":"<p>Generate UmlWriter graph architecture with only public methods and default render options.</p>"},{"location":"03_Cookbook/02_UmlWriter_public_methods_only/#console-command","title":"Console Command","text":"<p>When you're in project folder, invoke <code>diagram:class</code> command with following arguments:</p> <pre><code>bin/umlwriter diagram:class src/ --hide-private --hide-protected --without-constants --without-properties --format=svg\n</code></pre> <p>Will output this graph statements and image look like</p> <p></p>"},{"location":"03_Cookbook/02_UmlWriter_public_methods_only/#batch-php","title":"Batch PHP","text":"<p>Produces same results as previous console command.</p> <pre><code>&lt;?php\nuse Bartlett\\UmlWriter\\Generator\\GeneratorFactory;\nuse Bartlett\\UmlWriter\\Service\\ClassDiagramRenderer;\n\nuse Symfony\\Component\\Finder\\Finder;\n\n// path to directory where to find PHP source code\n$dataSource = dirname(__DIR__, 2) . '/src';\n\n$finder = new Finder();\n$finder-&gt;in($dataSource)-&gt;name('*.php');\n\n$generatorFactory = new GeneratorFactory('graphviz');\n// creates instance of Bartlett\\GraphUml\\Generator\\GraphVizGenerator\n$generator = $generatorFactory-&gt;getGenerator();\n\n$renderer = new ClassDiagramRenderer();\n$options = [\n    'show_private' =&gt; false,\n    'show_protected' =&gt; false,\n    'show_constants' =&gt; false,\n    'show_properties' =&gt; false,\n    'node.fillcolor' =&gt; '#FEFECE',\n    'node.style' =&gt; 'filled',\n];\n// generates UML class diagram of all objects found in dataSource (in graphviz format)\n$script = $renderer($finder, $generator, $options);\n// show UML diagram statements\necho $script;\n\n// default format is PNG, change it to SVG\n$generator-&gt;setFormat('svg');\n\necho $generator-&gt;createImageFile($renderer-&gt;getGraph()) . ' file generated' . PHP_EOL;\n</code></pre>"},{"location":"03_Cookbook/03_Custom_autoloader/","title":"Use a custom class autoloader","text":""},{"location":"03_Cookbook/03_Custom_autoloader/#custom-class-autoloader","title":"Custom Class Autoloader","text":"<p>In this example we need a custom autoloader to load non-standard classes.</p> <pre><code>&lt;?php\n// autoloader/classmap.php\n\n/** @var \\Composer\\Autoload\\ClassLoader $loader */\n$loader = require dirname(__DIR__, 2) . '/vendor/autoload.php';\n$loader-&gt;addClassMap(\n    [\n        'Name\\\\Space\\\\Foo' =&gt; __DIR__ . '/reflection-properties.php',\n        'Name\\\\Space\\\\Bar' =&gt; __DIR__ . '/reflection-properties.php',\n    ]\n);\n</code></pre> <p>Our data source is only one file: <code>reflection-properties.php</code> with such contents</p> <pre><code>&lt;?php\nnamespace Name\\Space;\n\nclass Bar\n{\n    protected $inheritedProperty = 'inheritedDefault';\n}\n\nclass Foo extends Bar\n{\n    public $property = 'propertyDefault';\n    private $privateProperty = 'privatePropertyDefault';\n    public static $staticProperty = 'staticProperty';\n    public $defaultlessProperty;\n    protected static $defaultName;\n}\n</code></pre>"},{"location":"03_Cookbook/03_Custom_autoloader/#console-command","title":"Console Command","text":"<p>When you're in project folder, invoke <code>diagram:class</code> command with following arguments:</p> <pre><code>bin/umlwriter diagram:class diagram:class examples/autoloader/reflection-properties.php --bootstrap examples/autoloader/classmap.php\n</code></pre> <p>Will output this graph statements and image look like</p> <p></p>"},{"location":"03_Cookbook/03_Custom_autoloader/#batch-php","title":"Batch PHP","text":"<p>Produces same results as previous console command.</p> <pre><code>&lt;?php\nrequire_once 'autoloader/classmap.php';\n\nuse Bartlett\\UmlWriter\\Generator\\GeneratorFactory;\nuse Bartlett\\UmlWriter\\Service\\ClassDiagramRenderer;\nuse Symfony\\Component\\Finder\\Finder;\n\n// path to directory where to find PHP source code\n$dataSource = __DIR__ . '/autoloader';\n\n$finder = new Finder();\n$finder-&gt;in($dataSource)-&gt;name('*.php');\n\n$generatorFactory = new GeneratorFactory('graphviz');\n// creates instance of Bartlett\\GraphUml\\Generator\\GraphVizGenerator\n$generator = $generatorFactory-&gt;getGenerator();\n\n$renderer = new ClassDiagramRenderer();\n// generates UML class diagram of all objects found in dataSource\n$script = $renderer($finder, $generator);\n// show UML diagram statements\necho $script;\n\n// default format is PNG, change it to SVG\n$generator-&gt;setFormat('svg');\n\necho $generator-&gt;createImageFile($renderer-&gt;getGraph()) . ' file generated' . PHP_EOL;\n</code></pre>"},{"location":"90_For_Developers/1_Generators/","title":"Generators","text":""},{"location":"90_For_Developers/1_Generators/#generators","title":"Generators","text":"<p>GraPHP UML used at least two components :</p> <ul> <li>the mathematical graph/network GraPHP library to draw UML diagrams.</li> <li>any generator that implement the following contract. GraPHP UML uses GraphVizGenerator as default, but allow others that may be registered later at runtime. UmlWrite includes as alternative the GraPHP PlantUML Generator</li> </ul>"},{"location":"90_For_Developers/1_Generators/#contract","title":"Contract","text":"<p>Each generator used to build graph statements should implement following interface.</p> <pre><code>&lt;?php\nnamespace Bartlett\\GraphUml\\Generator;\n\nuse Bartlett\\GraphUml\\Formatter\\FormatterInterface;\n\nuse Graphp\\Graph\\Graph;\n\nuse ReflectionClass;\nuse ReflectionExtension;\n\ninterface GeneratorInterface\n{\n    public function setOptions(array $values): void;\n\n    public function getFormatter(): FormatterInterface;\n\n    public function getName(): string;\n\n    public function getPrefix(): string;\n\n    public function getLabelClass(ReflectionClass $reflection): string;\n\n    public function getLabelExtension(ReflectionExtension $reflection): string;\n\n    public function setExecutable(string $executable): void;\n\n    public function setFormat(string $format): void;\n\n    public function createScript(Graph $graph): string;\n\n    public function createImageFile(Graph $graph, string $cmdFormat): string;\n}\n</code></pre> <ul> <li> <p><code>setOptions()</code> declares all options used to personalize generator's formatters.</p> </li> <li> <p><code>getFormatter()</code> is in charge to retrieve instance of a formatter that will produce vertex labels.</p> </li> <li> <p><code>getName()</code> identifies the generator with a unique name.</p> </li> <li> <p><code>getPrefix()</code> prefixes all public attributes (graph, node, edge, cluster) only if necessary.</p> </li> <li> <p><code>getLabelClass()</code> is in charge to make the label of the vertex corresponding to a class or interface element.</p> </li> <li> <p><code>getLabelExtension()</code> is in charge to make the label of the vertex corresponding to an extension element.</p> </li> <li> <p><code>setExecutable()</code> changes the executable to use.</p> </li> <li> <p><code>setFormat()</code> defines the format of image to draw.</p> </li> <li> <p><code>createScript()</code> is in charge to build graph statements depends on generator used.</p> </li> <li> <p><code>createImageFile()</code> is in charge to draw image graph in format asked (see <code>setFormat()</code>).</p> </li> </ul>"},{"location":"90_For_Developers/1_Generators/#common-functions","title":"Common functions","text":"<p>An AbstractGenerator class allow to implement basic image creation behaviors common to all generators.</p>"},{"location":"90_For_Developers/2_Creating_a_Generator/","title":"Creating a new generator","text":""},{"location":"90_For_Developers/2_Creating_a_Generator/#creating-a-new-generator","title":"Creating a new Generator","text":"<p>You must follow these steps:</p>"},{"location":"90_For_Developers/2_Creating_a_Generator/#1-creates-your-generator-class","title":"1. creates your generator class","text":"<p>This class must have implements the <code>GeneratorInterface</code>.</p> <pre><code>&lt;?php\nnamespace Name\\Space;\n\nuse Bartlett\\GraphUml\\Formatter\\FormatterInterface;\nuse Bartlett\\GraphUml\\Formatter\\HtmlFormatter;\nuse Bartlett\\GraphUml\\Generator\\AbstractGenerator;\nuse Bartlett\\GraphUml\\Generator\\GeneratorInterface;\n\nuse Graphp\\Graph\\Graph;\n\nclass MyGenerator extends AbstractGenerator implements GeneratorInterface\n{\n    public function getFormatter(): FormatterInterface\n    {\n        return new HtmlFormatter($this-&gt;options);\n    }\n\n    public function getName(): string\n    {\n        return 'mygenerator';\n    }\n\n    public function createScript(Graph $graph): string\n    {\n        return 'TODO: Implement createScript() method.' . PHP_EOL;\n    }\n}\n</code></pre>"},{"location":"90_For_Developers/2_Creating_a_Generator/#2-creates-your-generator-factory-class","title":"2. creates your generator factory class","text":"<p>This factory should be able to load your new generator class.</p> <pre><code>&lt;?php\nnamespace Name\\Space;\n\nuse Bartlett\\GraphUml\\Generator\\GeneratorInterface;\nuse Bartlett\\UmlWriter\\Generator\\GeneratorFactory;\n\nclass MyGeneratorFactory extends GeneratorFactory\n{\n    public function getGenerator(): GeneratorInterface\n    {\n        if ('mygenerator' === $this-&gt;generator) {\n            return new MyGenerator();\n        }\n\n        // fallback to default GeneratorFactory behavior (checks for GraphViz or PlantUML)\n        return parent::getGenerator();\n    }\n}\n</code></pre>"},{"location":"90_For_Developers/2_Creating_a_Generator/#3-autoloader","title":"3. autoloader","text":"<p>Of course your classes must be loadable with your autoloader.</p> <pre><code>&lt;?php\n/** @var \\Composer\\Autoload\\ClassLoader $loader */\n$loader = require dirname(__DIR__, 2) . '/vendor/autoload.php';\n$loader-&gt;addClassMap(\n    [\n        'Name\\\\Space\\\\MyGeneratorFactory' =&gt; __DIR__ . '/my-generator-factory.php',\n        'Name\\\\Space\\\\MyGenerator' =&gt; __DIR__ . '/my-generator.php',\n    ]\n);\n</code></pre>"},{"location":"90_For_Developers/2_Creating_a_Generator/#4-on-console-command","title":"4. on console command","text":"<p>Now if you want to use the <code>diagram:class</code> command, you'll need to modify the application launcher <code>bin/launcher</code> to inject the new generator factory in service container.</p> <pre><code>&lt;?php\nuse Bartlett\\UmlWriter\\Console\\Application;\nuse Bartlett\\UmlWriter\\Service\\ContainerService;\nuse Bartlett\\UmlWriter\\Generator\\GeneratorFactoryInterface;\nuse Name\\Space\\MyGeneratorFactory;\n\n$container = new ContainerService();\n$container-&gt;set(GeneratorFactoryInterface::class, new MyGeneratorFactory());\n\n$application = new Application($container);\n$application-&gt;run();\n</code></pre> <p>You have then to invoke <code>bin/launcher diagram:class --generator=mygenerator</code> command to get results.</p>"},{"location":"90_For_Developers/2_Creating_a_Generator/#5-on-batch-mode","title":"5. on batch mode","text":"<p>Alternative way is to use the batch PHP mode.</p> <pre><code>&lt;?php\nrequire_once __DIR__ . '/classmap.php';\n\nuse Bartlett\\UmlWriter\\Service\\ClassDiagramRenderer;\nuse Name\\Space\\MyGeneratorFactory;\nuse Symfony\\Component\\Finder\\Finder;\n\n// path to directory where to find PHP source code\n$dataSource = dirname(__DIR__, 2) . '/src';\n\n$finder = new Finder();\n$finder-&gt;in($dataSource)-&gt;name('*.php');\n\n$generatorFactory = new MyGeneratorFactory('mygenerator');\n// creates instance of Name\\Space\\MyGenerator\n$generator = $generatorFactory-&gt;getGenerator();\n\n$renderer = new ClassDiagramRenderer();\n// generates UML class diagram of all objects found in dataSource\n$script = $renderer($finder, $generator);\n// show UML diagram statements\necho $script;\n</code></pre>"},{"location":"90_For_Developers/2_Creating_a_Generator/#architecture","title":"Architecture","text":""}]}